geom_errorbar(aes(ymax = results$MAX, ymin = results$MIN))
ggplot(results, aes(x = results$MONTHS, y = results$VALUE)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$MAX, ymin = results$MIN))+ggtitle("IBU glucose change")
ggplot(results, aes(x = results$MONTHS, y = results$VALUE)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$MAX, ymin = results$MIN))+ggtitle("IBU glucose change")+theme(plot.title = element_text(hjust = 0.5))
ggplot(results, aes(x = results$MONTHS, y = results$VALUE)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$MAX, ymin = results$MIN))+ggtitle("IBU glucose change")+theme(plot.title = element_text(hjust = 0.5))+xlab("MIN timeline duration")+ylab("IBU blood glucose change")
ggplot(results, aes(x = results$MONTHS, y = results$VALUE)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$MAX, ymin = results$MIN))+xlab("MIN timeline duration")+ylab("IBU blood glucose change")
results <- read.delim("/home/podalv/results.tsv", sep="\t")
results
results <- read.delim("/home/podalv/result", sep="\t")
results
ggplot(results, aes(x = results$MONTHS, y = results$VALUE)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$MAX, ymin = results$MIN))+xlab("MIN timeline duration")+ylab("IBU blood glucose change")
library(ggplot2)
plot1 <- ggplot(results, aes(x = results$DURATION, y = results$ACEVAL)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$ACETMAX, ymin = results$ACETMIN))+xlab("MIN timeline duration")+ylab("ACET blood glucose change")
plot2 <- ggplot(results, aes(x = results$DURATION, y = results$IBUVAL)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = results$IBUMAX, ymin = results$IBUMIN))+xlab("MIN timeline duration")+ylab("IBU blood glucose change")
multiplot(plot1, plot2)
library(multiplot)
grid.arrange(plot1, plot2, ncol = 2, main = "Main title")
grid.arr
library(grid)
grid.arrange(plot1, plot2)
library(gridExtra)
grid.arrange(plot1, plot2)
grid.arrange(plot1, plot2, main="ACET vs. IBU blood glucose changes")
grid.arrange(main="ACET vs. IBU blood glucose changes", plot1, plot2)
grid.arrange(plot1, plot2)
read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=FALSE)
read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE)
loinc_train <= read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE)
loinc_train
train_control<- trainControl(method="cv", number=3)
require(caret)
require(ggplot2)
require(caret)
import(caret)
install.packages("caret")
summary(loinc_train)
dim(loinc_train)[2]
train_control<- trainControl(method="cv", number=3)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
require(caret)
install.packages("recipes")
install.packages("lubridate")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("lubridate")
install(caret)
install.packages("caret")
require(caret)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
install.packages('e1071', dependencies=TRUE)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
trainctrl <- trainControl(verboseIter = TRUE)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf", trControl=trainctrl)
train_control<- trainControl(method="cv", number=3, verboseIter = TRUE)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
View(loinc_train)
read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=FALSE, stringsAsFactors = FALSE)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=FALSE, stringsAsFactors = FALSE)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
View(loinc_train)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
fit<- train(loinc~., data=loinc_train, trControl=train_control, method="rf")
library(parallel)
library(doParallel)
install.packages("doParallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
require(parallel)
require(doParallel)
cluster <- makeCluster(8, type='PSOCK', outfile = ' ')
registerDoParallel(cluster)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
require(caret)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
rf_default <- train(outcome~., data=data_train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=train_control)
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=train_control)
rf_default <- train(loinc~., data=loinc_train, method="rf", tuneGrid=tunegrid, trControl=train_control)
seed <- 7
metric <- â€œAccuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(loinc_train)))
tunegrid <- expand.grid(.mtry=mtry)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(loinc_train)))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=train_control)
devtools::install_github('topepo/caret/pkg/caret')
install.packages("devtools")
devtools::install_github('topepo/caret/pkg/caret')
require(devtools)
devtools::install_github('topepo/caret/pkg/caret')
install.packages("git2r")
install.packages("libssl")
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(loinc_train)))
tunegrid <- expand.grid(.mtry=mtry)
cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
registerDoParallel(cluster)
rf_default <- train(loinc~., data=loinc_train, method="ctree", metric=metric, tuneGrid=tunegrid, trControl=train_control)
stopCluster(cluster)
registerDoSEQ()
save(rf_default, file = "model")
cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
registerDoParallel(cluster)
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=train_control)
stopCluster(cluster)
registerDoSEQ()
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=train_control)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(loinc_train)))
tunegrid <- expand.grid(.mtry=mtry)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, tuneGrid=tunegrid, trControl=train_control)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, trControl=train_control)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, trControl=train_control)
as.integer(as.logical(data.frame$V0))
as.logical(data.frame$V0)
as.logical(loinc_train$V0)
for (column in colnames(loinc_train)) {as.logical(loinc_train$[[paste(column)]])}
for (column in colnames(loinc_train)) {as.logical(loinc_train$paste(column))}
for (column in colnames(loinc_train)) {as.logical(loinc_train$[paste(column)])}
for (column in colnames(loinc_train)) {as.logical(loinc_train$[[paste(column)]])}
for (column in colnames(loinc_train)) {as.logical([[paste(column)]])}
View(loinc_train)
loinc_train.dim[2]
dim(loinc_train)[2]
instanceconvert <- colnames(loinc_train[0:dim(loinc_train)[2]-2])
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
for (i in instanceconvert)
{
loinc_train[[i]] <- as.numeric(loinc_train[[i]])
}
for (i in instanceconvert)
{
loinc_train[[i]] <- as.numeric(loinc_train[[i]])
}
;
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
for (i in instanceconvert)
{
loinc_train[[i]] <- as.numeric(loinc_train[[i]])
}
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
View(loinc_train)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
View(loinc_train)
View(loinc_train)
loinc_train$units
loinc_train$loinc
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~., data=loinc_train, method="rf", metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rf", metric=metric, trControl=train_control)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(data_train)))
tunegrid <- expand.grid(.mtry=mtry)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
loinc_train$units <- as.factor(loinc_train$units)
loinc_train$loinc <- as.factor(loinc_train$loinc)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(data_train)))
tunegrid <- expand.grid(.mtry=mtry)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
loinc_train$units <- as.factor(loinc_train$units)
loinc_train$loinc <- as.factor(loinc_train$loinc)
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
loinc_train$loinc
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(data_train)))
tunegrid <- expand.grid(.mtry=mtry)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
loinc_train$units <- as.factor(loinc_train$units)
loinc_train$loinc <- as.factor(loinc_train$loinc)
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
loinc_train$loinc
loinc_train$units
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
rm(train_control)
rm(loinc_train)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- floor(sqrt(ncol(data_train)))
tunegrid <- expand.grid(.mtry=mtry)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
loinc_train$units <- as.factor(loinc_train$units)
loinc_train$loinc <- as.factor(loinc_train$loinc)
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
droplevels(loinc_train$loinc)
loinc_train$loinc
rf_default <- train(loinc~units, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- 5
tunegrid <- expand.grid(.mtry=mtry)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
loinc_train$units <- as.factor(loinc_train$units)
loinc_train$loinc <- as.factor(loinc_train$loinc)
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~units, data=loinc_train, method="rf", tunegrid=tunegrid, metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
rf_default <- train(loinc~units, data=loinc_train, method="cart", tunegrid=tunegrid, metric=metric, trControl=train_control)
rf_default <- train(loinc~units, data=loinc_train, method="rpart", tunegrid=tunegrid, metric=metric, trControl=train_control)
rf_default <- train(loinc~units, data=loinc_train, method="rpart", metric=metric, trControl=train_control)
save(rf_default, file = "model")
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rpart", metric=metric, trControl=train_control)
require(parallel)
require(doParallel)
require(caret)
loinc_train <- read.csv("/home/podalv/loinc_train.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
#cluster <- makeCluster(6, type='PSOCK', outfile = '/home/podalv/log.txt')
#registerDoParallel(cluster)
control <- trainControl(method="repeatedcv", number=10, repeats=3, allowParallel = TRUE, verboseIter = TRUE)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- 5
tunegrid <- expand.grid(.mtry=mtry)
colcnt <- dim(loinc_train)[2]-2
instanceconvert <- colnames(loinc_train[0:colcnt])
loinc_train$units <- as.factor(loinc_train$units)
loinc_train$loinc <- as.factor(loinc_train$loinc)
for (i in instanceconvert)
{
loinc_train[[i]] <- as.logical(loinc_train[[i]])
}
rf_default <- train(loinc~.-loinc, data=loinc_train, method="rpart", metric=metric, trControl=train_control)
#stopCluster(cluster)
#registerDoSEQ()
save(rf_default, file = "model")
loinc_text <- read.csv("/home/podalv/loinc_test.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
colcnt <- dim(loinc_test)[2]-2
colcnt <- dim(loinc_text)[2]-2
instanceconvert <- colnames(loinc_text[0:colcnt])
loinc_text$units <- as.factor(loinc_text$units)
for (i in instanceconvert)
{
loinc_text[[i]] <- as.logical(loinc_text[[i]])
}
require(caret)
predict(rf_default,newdata = loinc_text)
View(loinc_train)
loinc_train$units
loinc_test <- read.csv("/home/podalv/loinc_test.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
instanceconvert <- colnames(loinc_text[0:colcnt])
loinc_text$units <- as.factor(loinc_text$units)
for (i in instanceconvert)
{
loinc_text[[i]] <- as.logical(loinc_text[[i]])
}
predict(rf_default,newdata = loinc_text)
View(loinc_text)
View(loinc_text)
rm(loinc_text)
instanceconvert <- colnames(loinc_test[0:colcnt])
loinc_test$units <- as.factor(loinc_test$units)
for (i in instanceconvert)
{
loinc_test[[i]] <- as.logical(loinc_test[[i]])
}
predict(rf_default,newdata = loinc_test)
prediction <- predict(rf_default,newdata = loinc_test)
loinc_test$loinc <- prediction
loinc_test
write.csv("/home/podalv/loinc_prediction.txt")
write.csv("/home/podalv/loinc_prediction.txt", prediction)
write.csv(prediction, "/home/podalv/loinc_prediction.txt")
install.packages("devtools")
library("devtools")
;
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/home/podalv/vladimir/workspace_stanford/AtlasAPI/R")
create("atlas")
connect <- function(url) {}
connect <- function(url) {
}
library(jsonlite)
connect <- function(url) {
status <- fromJSON(url)
if (status$status != "OK") {
stop("Could not connect to ATLAS instance at '"+url+"'")
}
}
connect("http://atlas.stanford.edu:8080")
connect("http://atlas.stanford.edu:8080/status")
View(connect)
fix(connect)
connect("http://atlas.stanford.edu:8080")
View(connect)
fix(connect)
View(connect)
connect("aaa")
fix(connect)
connect("aaa")
connect("http://aaa")
connect("http://atlas.stanford.edu")
connect("http://atlas.stanford.edu:8080")
View(connect)
connection <- connect("http://atlas.stanford.edu")
connection <- connect("https://atlas.stanford.edu")
connection <- connect("http://atlas.stanford.edu:8080")
View(connection)
connection
connection <- connect("http://atlas.stanford.edu:8080")
connection <- connect("http://atlas.stanford.edu:8080")
View(connection)
View(connection)
connection <- connect("http://atlas.stanford.edu:8080")
print(response)
connection <- connect("http://atlas.stanford.edu:8080")
View(connect)
rm(connect)
source(file = "connection.R")
source(file = "connect.R")
response$code <- status$version
if (status.isNull || status$status != "OK") {
stop(paste0("Could not connect to ATLAS instance at '", url, "'"))
}
print(status)
if (!exists("status") || status$status != "OK") {
stop(paste0("Could not connect to ATLAS instance at '", url, "'"))
}
stop(paste0("Could not connect to ATLAS instance))
stop(paste0("Could not connect to ATLAS instance"))
stop("Could not connect to ATLAS instance")
connection <- connect("http://atlas.stanford.edu:8080")
import(connect)
source("connect.R")
setwd("./atlas")
document()
setwd("..")
install("atlas")
?connect
??connect
document()
setwd("/home/podalv/vladimir/workspace_stanford/AtlasAPI/R/atlas/")
document()
import("atlas")
install("atlas")
setwd("/home/podalv/vladimir/workspace_stanford/AtlasAPI/R/")
import("atlas")
